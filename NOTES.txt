gentoo-builder/Dockerfile
    This creates a base system to build Gentoo images. Instances of this image
    have all the requirements for building Gentoo images. Package compilation
    and installation does not occur in this image, but happens in a container
    that is dynamically run by this builder image.

        ENTRYPOINT ["/usr/local/bin/build.sh"]

    The build script accepts any package as its arguments.

        docker run -dt gentoo-builder app-misc/curl

    The build script does the following

        1. Validate the basic requirements for building a new image
            - a usable docker socket
            - an existing portage tree
            - the presence of arguments (packages to build)
            - a valid base Gentoo image to use
        2. Instanciate a base container in which the build will occur
            - docker run -dt -v /usr/portage:/usr/portage $base
        3. Update the portage tree
            - docker exec $cid emerge --sync -q
        4. Build the packages in the container
            - docker exec $cid emerge -q $packages
            - docker rm -fr /var/tmp/portage
        5. Stop the container after the build
        6. Commit the container to a new Gentoo image
            - image is named "gentoo-" + first 4 characters of $cid
            - add instruction VOLUME /usr/portage
            - add instruction VOLUME /var/tmp/portage
            - add instruction CMD ["/bin/bash"]
        7. Remove the stopped container


gentoo-base/Dockerfile
    This will create a base gentoo image without the portage tree. Other Gentoo
    images will be based on this one and will inherit characteristics of this
    image. Packages that should be in every derived Gentoo images can be
    included in this one.

        VOLUME /usr/portage
        VOLUME /var/tmp/portage
        CMD ["/bin/bash"]


docker run --volumes-from gentoo-builder -e PKGS="genkernel" gentoo-base
    Create a new container that starts building the package genkernel.
    The container will stop once the compilation is complete. The user creates
    the new gentoo image with docker commit.


Building a minimal Gentoo system


1. Start a standard Gentoo container

    docker run -ti -v /usr/portage:/usr/portage gentoo/stage3-amd64 bash

2. Remove all USE flags and recompile everything

    nano /etc/portage/make.conf

        # leave all other flags in place
        USE="-* ncurses readline ipv6 ..."

    (set required flags)
    echo "sys-apps/portage python_targets_python3_4" >>
        /etc/portage/package.use/x86_64-none-linux-gnu
    echo "app-portage/gentoolkit python_targets_python3_4" >>
        /etc/portage/package.use/x86_64-none-linux-gnu
    echo "dev-lang/python xml threads" >>
        /etc/portage/package.use/x86_64-none-linux-gnu

    (recompile; gcc will take the most time)
    emerge -Nq @world
    eselect news read --quiet
    etc-update

3. Regenerate the locale archive (100MB+ by default, downsize to 2MB)

    sed -i -e 's/en_US/!d; s/^#//' /etc/locale.gen
    locale-gen

4. Remove unnecessary system packages

    (remove dependency of pkgconfig on glib)
    USE=internal-glib emerge -q1 pkgconfig

    (put the following list in /etc/portage/profile/packages)
        -*net-misc/openssh
        -*sys-apps/busybox
        -*sys-apps/hwids
        -*sys-apps/iproute2
        -*sys-apps/kbd
        -*sys-apps/man-db
        -*sys-apps/man-pages
        -*sys-apps/man-pages-posix
        -*sys-apps/net-tools
        -*sys-apps/openrc
        -*sys-apps/util-linux
        -*sys-fs/e2fsprogs
        -*sys-fs/udev
        -*sys-fs/udev-init-scripts
        -*sys-process/procps
        -*sys-process/psmisc
        -*virtual/dev-manager
        -*virtual/man
        -*virtual/modutils
        -*virtual/service-manager
        -*virtual/ssh
        -*virtual/udev
        app-arch/unzip
        app-editors/nano

    (remove all unnecessary packages)
    CLEAN_DELAY=0 emerge -c
    rm -fr /usr/share/{doc,man} /usr/lib/python3.4/test

5. Export the stripped down running container to a new image

    docker export $cid | docker import \
        -c 'VOLUME /usr/portage' -c 'CMD ["/bin/bash"]' - gentoo-minimal

6. Validate the size of the new image and run a container based off it

    docker images
    docker run -ti --rm -v /usr/portage:/usr/portage gentoo-minimal

7. Start installing packages and customizing the container

    - remove the '-*' USE flag in /etc/portage/make.conf
    - add other appropriate use flags as needed
    - emerge @world
    - install basic Linux tools as needed
        - net-tools for ifconfig, route, netstat, etc.
        - util-linux for mount, etc.
        - psproc for ps, etc.
        - miscps for pstree, etc.

    NOTE: At this point, the size of the container will grow rapidly as more
    files are changed with more emerge operations.
